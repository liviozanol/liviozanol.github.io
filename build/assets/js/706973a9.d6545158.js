"use strict";(self.webpackChunklivio_dump_page=self.webpackChunklivio_dump_page||[]).push([[247],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return g}});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=o.createContext({}),c=function(t){var e=o.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=c(t.components);return o.createElement(u.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},m=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,u=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),m=c(n),g=a,b=m["".concat(u,".").concat(g)]||m[g]||s[g]||r;return n?o.createElement(b,i(i({ref:e},p),{},{components:n})):o.createElement(b,i({ref:e},p))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5945:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},assets:function(){return p},toc:function(){return s},default:function(){return g}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],l={slug:"full-stack-it-automation-part-8-demo-gitlab-runner",title:"Full-Stack Automation Part 8 - Demo - Runner",authors:["livio"],tags:["automation","awx","ansible","gitlab","network automation","gitlab-ci","CI/CD","gitops"]},u=void 0,c={permalink:"/full-stack-it-automation-part-8-demo-gitlab-runner",editUrl:"https://github.com/liviozanol/liviozanol.github.io/blog/2022-01-18-automation-8/index.md",source:"@site/blog/2022-01-18-automation-8/index.md",title:"Full-Stack Automation Part 8 - Demo - Runner",description:"Gtilab-CI/Gitlab Runner",date:"2022-01-18T00:00:00.000Z",formattedDate:"January 18, 2022",tags:[{label:"automation",permalink:"/tags/automation"},{label:"awx",permalink:"/tags/awx"},{label:"ansible",permalink:"/tags/ansible"},{label:"gitlab",permalink:"/tags/gitlab"},{label:"network automation",permalink:"/tags/network-automation"},{label:"gitlab-ci",permalink:"/tags/gitlab-ci"},{label:"CI/CD",permalink:"/tags/ci-cd"},{label:"gitops",permalink:"/tags/gitops"}],readingTime:5.44,truncated:!0,authors:[{name:"L\xedvio Zanol Puppim",title:"Me",url:"https://github.com/liviozanol",imageURL:"https://github.com/liviozanol.png",key:"livio"}],prevItem:{title:"Full-Stack Automation Part 9 - Demo - API",permalink:"/full-stack-it-automation-part-9-demo-api"},nextItem:{title:"Full-Stack Automation Part 7 - Demo - AWX",permalink:"/full-stack-it-automation-part-7-demo-awx"}},p={authorsImageUrls:[void 0]},s=[{value:"Gtilab-CI/Gitlab Runner",id:"gtilab-cigitlab-runner",children:[],level:2}],m={toc:s};function g(t){var e=t.components,n=(0,a.Z)(t,i);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"gtilab-cigitlab-runner"},"Gtilab-CI/Gitlab Runner"),(0,r.kt)("p",null,"In the previous post we have defined our structured data, stored it on gitlab, created our playbooks and inventories and imported them on AWX. Now we will prepare our CI/CD pipeline to monitor changes on our data on gitlab and tell AWX to execute our playbook. Gitlab runner will be responsible for these tasks, registering on our gitlab projects/group and executing a series of tasks once our data is changed, calling AWX API to run our workflow playbook passing our modified data and monitoring our job in execution also using AWX API."),(0,r.kt)("p",null,"All files generated on this section (and on previous) are on full-stack automation github repo (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/liviozanol/full-stack-automation"},"https://github.com/liviozanol/full-stack-automation"),"), so you don't need to create it yourself again."),(0,r.kt)("p",null,"Everytime our gitlab repository is changed, gitlab-ci will get the contents of our wan_site_cfg.json file and send it to AWX as a variable, calling a job/playbook/template or a workflow that will implement the changes on our equipments."),(0,r.kt)("p",null,"After concluding this section you will have something like a GitOps for our wan automation service. If you change some information from your WAN site on gitlab repo, AWX will implement it on equipment."))}g.isMDXComponent=!0}}]);